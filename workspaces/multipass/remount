#!/usr/bin/env bash

function is_sourced() {
  ! [[ "${BASH_SOURCE[0]}" = "${0}" ]]
}

function set_command_env() {

  export COMMAND_PATH=''
  export COMMAND_NAME=''
  COMMAND_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)"
  COMMAND_NAME="$(basename "${BASH_SOURCE[0]}")"
  export COMMAND_LOCK_DIR="${COMMAND_PATH}/.lock-${COMMAND_NAME}"
}

function import_library() {

  local _command_path="${1}"

  # import core library
  # shellcheck source=/dev/null
  source "${_command_path}/lib/core.sh"

  # import logger library
  # shellcheck source=/dev/null
  source "${_command_path}/lib/logger.sh"

  # import validator library
  # shellcheck source=/dev/null
  source "${_command_path}/lib/validator.sh"

  # import multipass library
  # shellcheck source=/dev/null
  source "${_command_path}/lib/multipass.sh"
}

function set_default_env() {
  export INSTANCE_NAME=''
  INSTANCE_NAME="$(core::monorepo_name)"
  export LOGGER_FORMAT='json'
  export DRY_RUN='false'
  export VERBOSE='false'
}

function cleanup() {
  # NOTE: trap - is required to avoid recursive call this function.
  # shellcheck disable=SC2317
  trap - SIGINT SIGTERM ERR EXIT

  # shellcheck disable=SC2317
  rm -rf "${COMMAND_LOCK_DIR}"
}

function create_lock_dir() {

  if [[ -d "${COMMAND_LOCK_DIR:-}" ]]; then
    logger::error 'another command is running.'
    logger::warn "please try again later and check ${COMMAND_LOCK_DIR}"
    trap - SIGINT SIGTERM ERR EXIT
    exit 1
  fi
  mkdir "${COMMAND_LOCK_DIR}"
}

function cleanup() {
  # NOTE: trap - is required to avoid recursive call this function.
  trap - SIGINT SIGTERM ERR EXIT

  rm -rf "${COMMAND_LOCK_DIR}"
}

function usage() {
  cat - <<EOS
Usage: ${COMMAND_NAME}) [-h] [-i <instance name>] [-n] [-f <log-format>] [-v]

Script description:
  Remount the current mono repository of the multipass instance

Available options:

-h, --help                    Print this help and exit
-i, --instance                Set instance name (default: ${INSTANCE_NAME})
-n, --dry-run                 Run the script in dry-run mode
-f, --format                  Set log format (default: ${LOGGER_FORMAT})
-v, --verbose                 Print debug info
EOS
}

function init() {
  set_command_env
  import_library "${COMMAND_PATH}"
  set_default_env

  trap 'cleanup' 'SIGINT' 'SIGTERM' 'ERR' 'EXIT'

  create_lock_dir
}

function validate_args() {
  local -r _instance_name="${1}"
  local -r _logger_format="${2}"

  validator::is_rfc_1123 "${_instance_name}" || return 1

  case "${_logger_format}" in
  json | tsv | csv) ;;
  *)
    logger::error "${_logger_format} is invalid"
    return 1
    ;;
  esac
}

function check_exists_instance() {
  local -r _instance_name="${1}"
  logger::info "check ${_instance_name} instance start"
  if ! multipass::has_instance "${_instance_name}"; then
    logger::warn "${_instance_name} instance is not exist"
  fi
  logger::info "check ${_instance_name} instance end"
}

function unmount() {
  local -r _instance_name="${1}"
  local -r _dry_run="${2}"
  logger::info "umount for ${_instance_name} start"
  if [[ "${_dry_run}" = 'true' ]]; then
    logger::info "multipass umount ${_instance_name}"
  else
    multipass umount "${_instance_name}"
  fi
  logger::info "umount for ${_instance_name} end"
}

function mount() {
  local -r _instance_name="${1}"
  local -r _local_mount_point="${2}"
  local -r _remote_mount_point="${3}"
  local -r _dry_run="${4}"

  logger::info "mount for ${_instance_name} start"
  if [[ "${_dry_run}" = 'true' ]]; then
    logger::info "multipass mount ${_local_mount_point} ${_instance_name}:${_remote_mount_point}"
  else
    multipass mount "${_local_mount_point}" "${_instance_name}:${_remote_mount_point}"
  fi
  logger::info "mount for ${_instance_name} end"
}

function remount() {
  init

  # default values
  local _instance_name="${INSTANCE_NAME}"
  local _dry_run="${DRY_RUN}"
  local _verbose="${VERBOSE}"

  # parse options
  while :; do
    case "${1-}" in
    -i | --instance)
      _instance_name="${2:-${_instance_name}}"
      shift
      ;;
    -n | --dry-run)
      _dry_run='true'
      ;;
    -f | --format)
      export LOGGER_FORMAT="${2:-${LOGGER_FORMAT}}"
      shift
      ;;
    -v | --verbose)
      _verbose='true'
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    -?*)
      usage
      exit 1
      ;;
    *)
      break
      ;;
    esac
    shift
  done

  local -r _instance_name
  local -r _dry_run
  local -r _verbose

  [[ "${_verbose}" = 'true' ]] && set -x

  logger::info "${COMMAND_NAME} start" >&2
  validate_args "${_instance_name}" "${LOGGER_FORMAT}" >&2 || exit 1
  check_exists_instance "${_instance_name}" >&2 || exit 1

  logger::info "get mount point for ${_instance_name} start" >&2
  local _remote_mount_path=''
  local _local_mount_path=''
  _remote_mount_path="$(multipass::get_instance_mounts_remote_path "${_instance_name}" || exit 1)"
  _local_mount_path="$(multipass::get_instance_mounts_local_path "${_instance_name}" || exit 1)"
  validator::directory_exists "${_local_mount_path}" >&2 || exit 1
  validator::has_value "${_remote_mount_path}" >&2 || exit 1
  local -r _remote_mount_path
  local -r _local_mount_path
  logger::info "get mount point for ${_instance_name} end" >&2

  unmount "${_instance_name}" "${_dry_run}" >&2 || exit 1
  mount "${_instance_name}" "${_local_mount_path}" "${_remote_mount_path}" "${_dry_run}" >&2 || exit 1

  logger::info "${COMMAND_NAME} end" >&2
}

if ! is_sourced; then
  remount "$@"
fi
